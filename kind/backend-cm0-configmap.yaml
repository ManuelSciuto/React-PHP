apiVersion: v1
data:
  Dockerfile: |-
    FROM php:8.2-apache

    WORKDIR /var/www/html

    COPY . /var/www/html

    RUN apt-get update && apt-get install -y \
        zip \
        unzip \
        git \
     && rm -rf /var/lib/apt/lists/*

    RUN docker-php-ext-install mysqli && docker-php-ext-enable mysqli

    RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

    RUN composer install --no-interaction --no-scripts --no-progress

    RUN a2enmod rewrite

    RUN echo "ServerName localhost" >> /etc/apache2/apache2.conf

    RUN service apache2 restart

    EXPOSE 80

    CMD ["apache2ctl", "-D", "FOREGROUND"]
  composer.json: |
    {
        "require": {
            "firebase/php-jwt": "^6.10",
          "ext-json": "*",
          "ext-mysqli": "*"
        }
    }
  composer.lock: |
    {
        "_readme": [
            "This file locks the dependencies of your project to a known state",
            "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
            "This file is @generated automatically"
        ],
        "content-hash": "b2de23188edbd3da6fc58539ea507a6a",
        "packages": [
            {
                "name": "firebase/php-jwt",
                "version": "v6.10.1",
                "source": {
                    "type": "git",
                    "url": "https://github.com/firebase/php-jwt.git",
                    "reference": "500501c2ce893c824c801da135d02661199f60c5"
                },
                "dist": {
                    "type": "zip",
                    "url": "https://api.github.com/repos/firebase/php-jwt/zipball/500501c2ce893c824c801da135d02661199f60c5",
                    "reference": "500501c2ce893c824c801da135d02661199f60c5",
                    "shasum": ""
                },
                "require": {
                    "php": "^8.0"
                },
                "require-dev": {
                    "guzzlehttp/guzzle": "^7.4",
                    "phpspec/prophecy-phpunit": "^2.0",
                    "phpunit/phpunit": "^9.5",
                    "psr/cache": "^2.0||^3.0",
                    "psr/http-client": "^1.0",
                    "psr/http-factory": "^1.0"
                },
                "suggest": {
                    "ext-sodium": "Support EdDSA (Ed25519) signatures",
                    "paragonie/sodium_compat": "Support EdDSA (Ed25519) signatures when libsodium is not present"
                },
                "type": "library",
                "autoload": {
                    "psr-4": {
                        "Firebase\\JWT\\": "src"
                    }
                },
                "notification-url": "https://packagist.org/downloads/",
                "license": [
                    "BSD-3-Clause"
                ],
                "authors": [
                    {
                        "name": "Neuman Vong",
                        "email": "neuman+pear@twilio.com",
                        "role": "Developer"
                    },
                    {
                        "name": "Anant Narayanan",
                        "email": "anant@php.net",
                        "role": "Developer"
                    }
                ],
                "description": "A simple library to encode and decode JSON Web Tokens (JWT) in PHP. Should conform to the current spec.",
                "homepage": "https://github.com/firebase/php-jwt",
                "keywords": [
                    "jwt",
                    "php"
                ],
                "support": {
                    "issues": "https://github.com/firebase/php-jwt/issues",
                    "source": "https://github.com/firebase/php-jwt/tree/v6.10.1"
                },
                "time": "2024-05-18T18:05:11+00:00"
            }
        ],
        "packages-dev": [],
        "aliases": [],
        "minimum-stability": "stable",
        "stability-flags": [],
        "prefer-stable": false,
        "prefer-lowest": false,
        "platform": {
            "ext-json": "*"
        },
        "platform-dev": [],
        "plugin-api-version": "2.6.0"
    }
  db.php: |
    <?php
    require 'vendor/autoload.php';
    header("Access-Control-Allow-Origin: *");
    header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
    header("Access-Control-Allow-Headers: Content-Type");
    header("Content-Type: application/json");

    if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
        exit(0);
    }

    // PER DOCKER $dbhost = "db", PER LOCAL DEV $dbhost = "localhost";
    $dbhost = "db";
    $dbport = "3306";
    $dbuser = "root";
    // PER DOCKER $dbpass = "password", PER LOCAL DEV $dbpass = "";
    $dbpass = "password";
    $dbname = "react-php";

    $conn = new mysqli($dbhost, $dbuser, $dbpass, $dbname, $dbport);
  index.php: |
    <?php
    echo phpinfo();
  login.php: |+
    <?php
    global $conn;
    include 'db.php';
    require_once 'vendor/autoload.php';
    use Firebase\JWT\JWT;

    $requestBody = file_get_contents('php://input');
    $data = json_decode($requestBody, true);
    $username = $data['username'] ?? '';
    $password = $data['password'] ?? '';
    $rememberMe = $data["rememberMe"] ?? false;
    $response = array();

    if (!empty($username) && !empty($password)) {
        $query = "SELECT id, password FROM users WHERE username = ?";
        $stmt = mysqli_prepare($conn, $query);
        mysqli_stmt_bind_param($stmt, "s", $username);
        $stmt->execute();
        $result = $stmt->get_result();
        $row = $result->fetch_assoc();
        if (!empty($row)) {
            if (password_verify($password, $row['password'])) {
                $tokenData = [
                    'id' => $row['id'],
                    'username' => $username,
                    'exp' => time() + ($rememberMe ? 604800 : 3600), // Una settimana o Un'ora
                ];

                $jwtKey = 'ae5734d02c8c3b82e282b08c64a1efad9a0d6d723dd4df6c2c6c723b8fcbe4a6';
                $alg = 'HS256';
                $token = JWT::encode($tokenData, $jwtKey, $alg);
                $response['token'] =  $token;
            } else {
                $response['error'] =  'Password Errata';
            }
        } else {
            $response['error'] = "Username errato";
        }

    } else if (!empty($username)) {
        $response['error'] = 'Username not provided';
    } else {
        $response['error'] = 'Password not provided';
    }

    echo json_encode($response);

kind: ConfigMap
metadata:
  labels:
    io.kompose.service: backend
  name: backend-cm0
